<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>an15m</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://an15m.tk/"/>
  <updated>2017-09-07T09:13:12.200Z</updated>
  <id>http://an15m.tk/</id>
  
  <author>
    <name>an15m</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>thinking in java v4 5</title>
    <link href="http://an15m.tk/2017/09/07/thinking-in-java-v4-5/"/>
    <id>http://an15m.tk/2017/09/07/thinking-in-java-v4-5/</id>
    <published>2017-09-07T09:13:12.000Z</published>
    <updated>2017-09-07T09:13:12.200Z</updated>
    
    <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">











<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
</the></excerpt>]]></content>
    
    <summary type="html">
    
      &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JAVA编程思想第四版第四章</title>
    <link href="http://an15m.tk/2017/09/07/thinking-in-java-v4-4/"/>
    <id>http://an15m.tk/2017/09/07/thinking-in-java-v4-4/</id>
    <published>2017-09-07T09:12:56.000Z</published>
    <updated>2017-09-07T11:02:08.645Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>第四章  执行控制流程<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="Foreach语法"><a href="#Foreach语法" class="headerlink" title="Foreach语法"></a>Foreach语法</h2><p><code>Foreach</code>可以用于任何<code>Iterable</code>对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span>[] f = <span class="keyword">new</span> <span class="keyword">float</span>[]&#123;<span class="number">1.1f</span>,<span class="number">2.1f</span>,<span class="number">3.2f</span>&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">float</span> x : f) &#123;</div><div class="line">    System.out.println(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="臭名昭著的goto"><a href="#臭名昭著的goto" class="headerlink" title="臭名昭著的goto"></a>臭名昭著的goto</h2><ul>
<li>java不支持<code>goto</code>语句，但仍可以进行类似的跳转，但比起典型的<code>goto</code>有了很多限制。另外，<code>goto</code>仍然是java中的一个保留字。</li>
<li><p>标签的使用：标签是后面跟有冒号的标识符，就像<code>label1:</code>这样。java中标签要写在迭代语句之前，中间最好不要有任何其他语句。假如有以下代码：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">label1:</div><div class="line">outer-iteration&#123;</div><div class="line">    inter-iteration&#123;</div><div class="line">        <span class="comment">//...</span></div><div class="line">        <span class="keyword">break</span>; <span class="comment">//(1)</span></div><div class="line">        <span class="comment">//...</span></div><div class="line">        <span class="keyword">continue</span>; <span class="comment">//(2)</span></div><div class="line">        <span class="comment">//...</span></div><div class="line">        <span class="keyword">continue</span> label1; <span class="comment">//(3)</span></div><div class="line">        <span class="comment">//...</span></div><div class="line">        <span class="keyword">break</span> label1; <span class="comment">//(4)</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  在(1)中，<code>break</code>中断内部迭代，回到外部迭代。<br>在(2)中，<code>continue</code>是执行点移回内部迭代的起始处。<br>在(3)中，<code>continue label1</code>同时中断内部迭代以及外部迭代，直接转到<code>label1</code>处；随后，它实际上是继续迭代过程，但却从外部迭代开始。<br>在(4)中，<code>break label1</code>也会中断所有迭代，并回到<code>label1</code>处，但并不重新进入迭代，它实际上是完全终止了两个迭代。</p>
</li>
</ul>
<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>switch中的选择因子必须是<code>int</code>或<code>char</code>那样的整数值(java7以后也可以使用字符串)。</p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;第四章  执行控制流程&lt;br&gt;
    
    </summary>
    
      <category term="JAVA编程思想v4" scheme="http://an15m.tk/categories/JAVA%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3v4/"/>
    
    
      <category term="java" scheme="http://an15m.tk/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA编程思想第四版第三章</title>
    <link href="http://an15m.tk/2017/09/07/thinking-in-java-v4-3/"/>
    <id>http://an15m.tk/2017/09/07/thinking-in-java-v4-3/</id>
    <published>2017-09-07T09:12:50.000Z</published>
    <updated>2017-09-07T10:59:58.882Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>第三章 操作符<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><ul>
<li>基本类型的赋值：基本类型存储了实际的值，而非指向一个对象的引用，所以在其赋值的时候，是直接将一个地方的内容复制到另一个地方。</li>
<li>对象的“赋值”：对一个对象进行操作时，我们真正操作的是对象的引用。所以倘若“将一个对象赋值给另一个对象”，实际是将“引用”从一个地方复制到了另一个地方。这意味着假若对对象使用<code>c=d</code>，那么c和d都指向原本只有d指向的那个对象。也就是说，当“c指向的对象发送变化时”，“d指向的对象”也会跟着发生变化，而原来c所指向的那个对象，现在没有任何标识符指向它，所以它“丢失了”，“垃圾回收器”会自动将它清理，而c实际上成了d的一个“别名”，这种现象称为“别名现象”。而在基本类型的赋值中，c的变化是不影响d的。</li>
<li>由于“别名现象”的存在：，假如我们将一个对象以参数的形式传递给一个方法，在方法内部修改对象会影响到方法外部的对象。</li>
</ul>
<h2 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h2><ul>
<li>整数除法会直接去掉小数位，而不是四舍五入。</li>
</ul>
<h2 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h2><ul>
<li><code>==</code>与<code>!=</code>：当这两个关系操作符作用与对象时，比较的是两个对象的“引用”是否相同，也就是这两个对象是不是同一个对象。而要比较两个对象的实际内容是不是相同的话，可以使用所有对象都适用的<code>equals()</code>方法。但是若比较的两个对象中有我们自己创建的类，那么我们需要在我们写的类中覆盖<code>equals()</code>方法，因为我们写的类中的默认<code>equals()</code>方法比较的还是引用。</li>
</ul>
<h2 id="直接常量"><a href="#直接常量" class="headerlink" title="直接常量"></a>直接常量</h2><ol>
<li><p>直接常量一般要在其后面加上后缀字符以标志它的类型：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">后缀：</div><div class="line">    L或l：long</div><div class="line">    F或f：float</div><div class="line">    D或d：double</div><div class="line">前缀：</div><div class="line">    0x或0X：十六进制，十六进制数使用于所有整数数据类型(可以赋值给所有整数类型)</div><div class="line">    0：八进制</div></pre></td></tr></table></figure>
<p> 在使用十六进制和八进制的时候，可以使用<code>Integer</code>和<code>Long</code>类的静态方法<code>toBinaryString()</code>将结果以二进制形式显示出来。</p>
</li>
</ol>
<h2 id="按位操作符"><a href="#按位操作符" class="headerlink" title="按位操作符"></a>按位操作符</h2><ul>
<li><code>&amp;</code>：与；<code>|</code>：或；<code>~</code>：非；<code>^</code>：异或</li>
<li>布尔值可以执行按位“与”、“或”和“异或”操作，不能执行按位“非”操作。</li>
<li>移位表达式中，不能使用布尔运算。</li>
</ul>
<h2 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h2><ul>
<li><code>&lt;&lt;</code>：左移操作符。能按照操作符右侧指定的位数将操作符左侧的操作数向左移动(在低位补0)。</li>
<li><code>&gt;&gt;</code>：“有符号”右移操作符。按照操作符右侧指定的位数将操作符左侧的操作数向右移动。“有符号”右移操作符使用“符号扩展”：若符号为正，则在高位插入0；若符号为负，则在高位插入1.</li>
<li><code>&gt;&gt;&gt;</code>：“无符号”右移操作符。它使用“零扩展”：无论正负，都在高位插入0。</li>
</ul>
<h2 id="字符串操作符-或"><a href="#字符串操作符-或" class="headerlink" title="字符串操作符 + 或 +="></a>字符串操作符 + 或 +=</h2><ul>
<li>java中不支持操作符的重载</li>
</ul>
<h2 id="类型转换操作符"><a href="#类型转换操作符" class="headerlink" title="类型转换操作符"></a>类型转换操作符</h2><ul>
<li>java允许我们把任何基本数据类型转换成别的基本数据类型，但布尔型除外，布尔型不允许进行任何类型转换。</li>
<li>“类”数据类型，不允许进行类型转换。为了将类转换成另一种，必须采用特殊的方法。</li>
<li>将<code>float</code>或<code>double</code>转型为整数类型时，总是对该数字执行截尾。如果要得到舍入的结果，就要使用<code>java.lang.Math</code>中的<code>round()</code>方法。</li>
<li>对比<code>int</code>小的类型(<code>byte</code>、<code>char</code>或<code>short</code>)执行算术运算或者按位运行，那么在运算之前，这些值会自动转换成<code>int</code>。这样，最终的结果也是<code>int</code>类型。</li>
<li>java对两个<code>int</code>运算结果溢出不会报错也没有警告信息。</li>
</ul>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;第三章 操作符&lt;br&gt;
    
    </summary>
    
      <category term="JAVA编程思想v4" scheme="http://an15m.tk/categories/JAVA%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3v4/"/>
    
    
      <category term="java" scheme="http://an15m.tk/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA编程思想第四版第二章</title>
    <link href="http://an15m.tk/2017/09/07/thinking-in-java-v4-2/"/>
    <id>http://an15m.tk/2017/09/07/thinking-in-java-v4-2/</id>
    <published>2017-09-07T09:12:47.000Z</published>
    <updated>2017-09-07T10:23:39.927Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>第二章 一切都是对象<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<ol>
<li>数据存储的地方：按快慢：寄存器&gt;堆栈&gt;堆&gt;常量存储&gt;非RAM存储<ol>
<li>常量存储：存放在程序代码内部</li>
<li>非RAM存储：存放在程序之外，比如 <em>流对象</em> 和 <em>持久化对象</em></li>
</ol>
</li>
<li>基本类型和非基本类型的区别<br> <input type="hidden" value="Just for something ! You can ignore it."><ol>
<li>非基本类型使用<code>new</code>关键字来初始化，存储于堆中，操作非基本类型使用的实际上是对象的一个“引用”，而非对象本身。</li>
<li>基本类型的创建不用<code>new</code>关键字，而是创建一个非引用的“自动”变量，直接存储“值”，存储于堆栈中，比存储于堆中更加高效。另外，java基本类型所占存储空间的大小不随机器硬件架构的变化而变化。</li>
<li>java中存在基本类型的包装类型，比如int的包装类型为Integer类型，可以使用<code>new Integer(1);</code>或<code>Integer integer = 3;</code>在堆中创建一个非基本类型，来表示对应的基本类型。</li>
</ol>
</li>
<li><p>java中不允许在C和C++里将一个较大作用域的变量“隐藏”起来的做法，以下代码是错误的：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> x = <span class="number">12</span>;</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> x = <span class="number">9</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>java对象不具备和基本类型一样的生命周期。当用<code>new</code>创建一个java对象时，它可以存活于作用域之外。例如以下代码：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    String s = <span class="keyword">new</span> String(<span class="string">"a string"</span>);</div><div class="line">&#125;<span class="comment">//作用域终点</span></div></pre></td></tr></table></figure>
<p> 引用s在作用域终点就消失了，然而，s指向的String对象仍继续占据内存空间。</p>
</li>
<li>当变量作为 <em>类的成员</em> 时，java会自动用默认值对其进行初始化；但当变量作为 <em>局部变量</em> (并非某个类的字段)时，java不会对其进行自动初始化。</li>
<li><p><code>static</code>关键字<br>java中的 <em>成员</em> 与 <em>方法</em> 都是与类绑定的，只有通过<code>new</code>创建那个类的对象，该类的 <em>成员</em> 和 <em>方法</em> 才可以被外界调用。<br>有两种情形是用上述方法无法满足的。一是情况是想给某特定域分配单一存储空间，而不去考虑究竟要创建多少对象，甚至根本就不创建任何对象。另一种情况是希望某个方法不与包换它的类的任何对象关联在一起，也就是说，即使没有创建对象，也可以调用这个方法。<br><code>static</code>可以满足这两方面的需求。当声明一个事物是<code>static</code>时，就意味着这个域或者方法不会与包含它的那个类的任何对象事例关联在一起。所以，即使从未创建某个类的任何对象，也可以调用其<code>static</code>方法或访问其<code>static</code>域。假设有以下代码：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span></span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">47</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 现在，即使你创建了两个<code>StaticTest</code>对象，<code>StaticTest.i</code>也只有一份存储空间，这两个对象共享同一个<code>i</code>。如果继续写：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">StaticTest st1 = <span class="keyword">new</span> StaticTest();</div><div class="line">StaticTest st2 = <span class="keyword">new</span> StaticTest();</div></pre></td></tr></table></figure>
<p> 在这里，<code>st1.i</code>和<code>st2.i</code>指向同一存储空间，因此他们具有相同的值47。<br>引用<code>static</code>变量有两种方法。一是通过一个对象去定位它，如<code>st1.i</code>；也可以通过类名直接引用，如<code>StaticTest.i</code>,而这对于非静态成员则不行。</p>
</li>
<li><p>注释文档<br>如果代码与文档是分离的，那么在每次修改代码时，都需要修改相应的文档。javadoc允许你将代码与文档写在一个文件内，然后由javadoc去提取注释。javadoc的输出是一个HTML文档。此外，如果想对javadoc处理过的信息执行特殊的操作，那么可以通过编写你自己的被称为“doclets”的javadoc处理器来实现。下面介绍javadoc的语法：</p>
<ul>
<li>所有javadoc命令都只能在<code>/**</code>注释中出现，结束和通常一样使用<code>*/</code>。</li>
<li>使用javadoc的方式主要有两种：嵌入HTML或使用“文档标签”。 <em>独立文档标签</em> 是一些以“@”字符开头的命令，要置于注释行的最前面。 <em>行内文档标签</em> (在花括号内)可以出现在javadoc注释中的任何地方，也是以“@”开头。</li>
<li><p>共有三种类型的注释文档，分别对应与注释位置后面的三种元素：类、域和方法。例：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 类注释 */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Documentation</span></span>&#123;</div><div class="line">  <span class="comment">/** 域注释 */</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> i;</div><div class="line">  <span class="comment">/** 方法注释 */</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>javadoc只能为<code>public</code>和<code>protected</code>成员进行文档注释。<code>private</code>和包内可访问成员的注释会被忽略掉(可以用<code>-private</code>参数将<code>private</code>成员的注释也包括在内)</p>
</li>
<li><p>嵌入式HTML：javadoc支持利用HTML对文档进行格式化，例如：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* &lt;pre&gt;</span></div><div class="line"><span class="comment">* System.out..println(new Date());</span></div><div class="line"><span class="comment">* &lt;/pre&gt;</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>
<p>  不要在嵌入式HTML中使用标题标签，例如<code>&lt;h1&gt;</code>或<code>&lt;hr&gt;</code>，因为javadoc会插入自己的标题，而你的标题可能同它们发生冲突。</p>
</li>
<li>注意，在文档注释中，位于每一行开头的<code>*</code>和前导空格都会被javadoc丢弃。</li>
<li><p>一些标签示例：</p>
<ul>
<li><p><code>@see</code> ：引用其他类。<code>@see</code>标签允许用户引用其他类的文档。javadoc会在其生成的文件中，通过<code>@see</code>标签链接到其他文档。格式如下：</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@see</span> classname</div><div class="line"><span class="meta">@see</span> fully-qualified-classname    <span class="comment">//无歧义类名</span></div><div class="line">@see fully-qualified-classname#method-name</div></pre></td></tr></table></figure>
<p>  上述每种格式都会在生成的文档中加入一个具有超链接的“See Also”(参见)条目。但是javadoc不会检查你所提供的超链接是否有效。</p>
</li>
<li><code>{@link package.class#member label}</code>：该标签与<code>@see</code>标签极其相似，只是它用与行内，并且是用“label”作为超链接文本而不用“See Also”。</li>
<li><code>{@docRoot}</code>：该标签产生到文档根目录的相对路径，用于文档树页面的显式超链接。</li>
<li><code>{@inheritDoc}</code>：该标签从当前这个类的最直接的基类中继承相关文档到当前的文档注释中。</li>
<li><p><code>@version</code>：格式如下：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@version</span> version-information</div></pre></td></tr></table></figure>
<p>  其中，“version-information”可以是任何你认为适合包含在版本说明中的重要信息。javadoc通过<code>-version</code>参数来获取版本信息。</p>
</li>
<li><p><code>@author</code>：格式如下：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@author</span> author-information</div></pre></td></tr></table></figure>
<p>  其中，“author-information”可以包含作者姓名、电子邮件或其他适宜的信息。javadoc通过<code>-author</code>获取作者信息。使用多个标签列出所有作者是，他们必须连续放置。</p>
</li>
<li><code>@since</code>：最早使用该方法、类或接口的版本</li>
<li><p><code>@param</code>：格式如下：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@param</span> parammeter-name description</div></pre></td></tr></table></figure>
<p>  “parammeter-name”为参数名，“description”为说明，可以给每个参数写一个。</p>
</li>
<li><p><code>@return</code>：格式如下：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@return</span> description</div></pre></td></tr></table></figure>
<p>  “description”用来描述返回值的信息。</p>
</li>
<li><p><code>@throws</code>：格式如下：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@throws</span> fully-qualified-<span class="class"><span class="keyword">class</span>-<span class="title">name</span> <span class="title">description</span></span></div></pre></td></tr></table></figure>
<p>  “fully-qualified-class-name”为一个异常类的无歧义名字。对所有可能抛出的异常类都要进行说明。</p>
</li>
<li><code>@deprecated</code>：该标签用于指出一些旧特性已由改进的新特性取代。Java SE5中，该标签已被<code>@Deprecated</code>标签取代。</li>
</ul>
</li>
</ul>
</li>
<li>编码风格：<ul>
<li>类名首字母要大写</li>
<li>如果类名由几个单词构成，那么把它们并在一起(不要用下划线来分隔名字)，其中每个内部单词的首字母都采用大写形式。这种风格有时称作“驼峰风格”。几乎其他所有内容——方法、字段(成员变量)以及对象引用名称等，都用这种格式，不一样的只是标识符的第一个字母采用小写。</li>
</ul>
</li>
</ol>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;第二章 一切都是对象&lt;br&gt;
    
    </summary>
    
      <category term="JAVA编程思想v4" scheme="http://an15m.tk/categories/JAVA%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3v4/"/>
    
    
      <category term="java" scheme="http://an15m.tk/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA编程思想第四版第一章</title>
    <link href="http://an15m.tk/2017/09/07/thinking-in-java-v4-1/"/>
    <id>http://an15m.tk/2017/09/07/thinking-in-java-v4-1/</id>
    <published>2017-09-07T09:06:07.000Z</published>
    <updated>2017-09-07T10:23:22.979Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>第一章 对象导论<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<ol>
<li><code>private</code>关键字：除类型创建者和类型的内部方法之外的任何人都不能访问。<br><code>protected</code>关键字：与<code>private</code>相当，差别在与继承的类可以访问<code>protected</code>成员。</li>
</ol>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;第一章 对象导论&lt;br&gt;
    
    </summary>
    
      <category term="java编程思想v4" scheme="http://an15m.tk/categories/java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3v4/"/>
    
    
      <category term="java" scheme="http://an15m.tk/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>fsat git</title>
    <link href="http://an15m.tk/2017/08/30/fsat-git/"/>
    <id>http://an15m.tk/2017/08/30/fsat-git/</id>
    <published>2017-08-30T06:36:33.000Z</published>
    <updated>2017-09-05T06:48:06.640Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>git clone慢的解决方法<br><a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<ul>
<li>首先你要有一个代理，推荐<a href="https://github.com/shadowsocks" target="_blank" rel="external">shadowsocks</a></li>
</ul>
<h2 id="为http和https协议设置socks5代理"><a href="#为http和https协议设置socks5代理" class="headerlink" title="为http和https协议设置socks5代理"></a>为http和https协议设置socks5代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global http.proxy <span class="string">'socks5://&lt;your_proxy_host&gt;:&lt;your_proxy_port&gt;'</span></div><div class="line">git config --global https.proxy <span class="string">'socks5://&lt;your_proxy_host&gt;:&lt;your_proxy_port&gt;'</span></div></pre></td></tr></table></figure>
<h2 id="为git协议设置socks5代理"><a href="#为git协议设置socks5代理" class="headerlink" title="为git协议设置socks5代理"></a>为git协议设置socks5代理</h2><p>以下格式使用的是<code>git</code>协议<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git://github.com/git/git.git</div></pre></td></tr></table></figure></p>
<p>首先创建一个文件<code>git-proxy</code>，写入以下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">nc -x &lt;your_proxy_host&gt;:&lt;your_proxy_port&gt; <span class="variable">$1</span> <span class="variable">$2</span></div></pre></td></tr></table></figure></p>
<p>这里的<code>nc</code>是<code>netcat openbsd</code>而不是<code>netcat traditional</code>。<br>给文件添加可执行权限<code>sudo chmod +x git-proxy</code>。</p>
<p>将<code>git-proxy</code>文件所在文件夹加入环境变量<code>$PATH</code>（记得刷新环境变量）。</p>
<p>配置<code>core.gitProxy</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global --add core.gitProxy git-proxy</div></pre></td></tr></table></figure></p>
<h2 id="为ssh协议设置socck5代理"><a href="#为ssh协议设置socck5代理" class="headerlink" title="为ssh协议设置socck5代理"></a>为ssh协议设置socck5代理</h2><p>以下格式使用的是<code>ssh</code>协议：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git@github.com:git/git.git</div></pre></td></tr></table></figure></p>
<p>在配置之前首先运行以下命令确保你能<code>ssh</code>到你想连接的网站。例如<code>github</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -vT git@github.com</div></pre></td></tr></table></figure></p>
<p>出现以下回应说明成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi your_username! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure></p>
<p>以下方法不一定每个人都能用，取决于你的代理服务商有没有提供相关功能：<br>修改 <code>~/.ssh/config</code> 加入如下内容：<br>全局代理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ProxyCommand nc -X 5 -x &lt;your_proxy_host&gt;:&lt;your_proxy_port&gt; %h %p</div></pre></td></tr></table></figure></p>
<p>特定域名进行代理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Host 域名</div><div class="line">ProxyCommand nc -X 5 -x &lt;your_proxy_host&gt;:&lt;your_proxy_port&gt; %h %p</div><div class="line"></div><div class="line">Host github.com</div><div class="line">ProxyCommand nc -X 5 -x &lt;your_proxy_host&gt;:&lt;your_proxy_port&gt; %h %p</div></pre></td></tr></table></figure></p>
<p>如果<code>git clone git@github:git/git.git</code>长时间无反应，最后报以下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ssh_exchange_identification: Connection closed by remote host</div><div class="line">fatal: Could not read from remote repository.</div><div class="line"></div><div class="line">Please make sure you have the correct access rights</div><div class="line">and the repository exists.</div></pre></td></tr></table></figure></p>
<p>说明代理服务商不支持相关功能。</p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;git clone慢的解决方法&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://an15m.tk/categories/git/"/>
    
    
      <category term="git" scheme="http://an15m.tk/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git config命令</title>
    <link href="http://an15m.tk/2017/08/30/git-config/"/>
    <id>http://an15m.tk/2017/08/30/git-config/</id>
    <published>2017-08-30T02:33:57.000Z</published>
    <updated>2017-09-05T06:58:52.727Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>git config命令相关知识<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="配置目录"><a href="#配置目录" class="headerlink" title="配置目录"></a>配置目录</h2><h3 id="git配置目录分三级"><a href="#git配置目录分三级" class="headerlink" title="git配置目录分三级"></a>git配置目录分三级</h3><ul>
<li>仓库级，通过<code>--local</code>配置，在当前仓库下<code>.git/config</code></li>
<li>全局级，通过<code>--global</code>配置，在用户目录下<code>~/.gitconfig</code></li>
<li>系统级，通过<code>--system</code>配置，在<code>/etc/gitconfig</code>中</li>
<li>配置文件的权重是<code>仓库&gt;全局&gt;系统</code></li>
</ul>
<h2 id="一些配置详解"><a href="#一些配置详解" class="headerlink" title="一些配置详解"></a>一些配置详解</h2><ul>
<li><code>core.gitProxy</code>：当使用Git协议抓取时（作为命令主机端口？）执行的“代理命令”，而不是直接建立连接。如果变量值使用“COMMAND FOR DOMAIN”的格式，则该命令仅适用于以指定的域字符串结尾的主机名。该变量可以多次设置，并按照给定的顺序进行匹配; 以第一次匹配到的为准。<br>这个配置可以被<code>GIT_PROXY_COMMAND</code>环境变量覆盖（它始终普遍应用）。<br>特殊字符串<code>none</code>可以用作代理命令来指定给定域模式不使用任何代理。 这有助于在为外部域使用通用代理的同时从代理使用中排除防火墙内的服务器。</li>
<li><code>http.sslVerify</code>：是否在获取或推送HTTPS时验证SSL证书。 可以被<code>GIT_SSL_NO_VERIY</code>环境变量覆盖。</li>
<li><code>http.sslCert</code>：获取或推送HTTPS时包含SSL证书的文件。 可以被<code>GIT_SSL_CERT</code>环境变量覆盖。</li>
<li><code>http.sslKey</code>：获取或推送HTTPS时包含SSL私钥的文件。 可以被<code>GIT_SSL_KEY</code>环境变量覆盖。</li>
</ul>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;git config命令相关知识&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://an15m.tk/categories/git/"/>
    
    
      <category term="git" scheme="http://an15m.tk/tags/git/"/>
    
  </entry>
  
</feed>
