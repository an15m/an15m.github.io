<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>an15m</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://an15m.tk/"/>
  <updated>2018-03-16T08:48:20.068Z</updated>
  <id>http://an15m.tk/</id>
  
  <author>
    <name>an15m</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA编程思想第四版第六章</title>
    <link href="http://an15m.tk/2018/03/16/thinking-in-java-v4-6/"/>
    <id>http://an15m.tk/2018/03/16/thinking-in-java-v4-6/</id>
    <published>2018-03-16T08:39:45.000Z</published>
    <updated>2018-03-16T08:48:20.068Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>第六章 访问权限控制<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="包访问权限-protected"><a href="#包访问权限-protected" class="headerlink" title="包访问权限 protected"></a>包访问权限 protected</h2><ul>
<li><code>protected</code>与<code>private</code>类似，差别在于具有<code>protected</code>访问修饰词的成员在继承类中是可以访问的。如果在当前包中继承另一个包中的类，对具有<code>protected</code>访问修饰词的成员，也是可以访问的。</li>
<li><code>protected</code>修饰词具有包访问权限，即同一个包内都可以访问。</li>
<li><code>protected</code>与<code>public</code>的区别在于，非当前包中的继承类可以访问，非继承类不可访问。</li>
<li>相同目录下所有不具有明确<code>package</code>声明的文件，都被视为是该目录下<em>默认包</em> 的一部分。</li>
</ul>
<h2 id="import-寻址"><a href="#import-寻址" class="headerlink" title="import 寻址"></a>import 寻址</h2><p>例如<code>import tk.an15m.util.Print</code></p>
<ul>
<li>JAVA首先要查找<code>CLASSPATH</code>环境变量，假如<code>CLASSPATH=.;c:\javaclass</code>，<code>.</code>代表运行命令的当前路径，因此JAVA会首先定位到当前目录，然后按照<code>./tk/an15m/util/Print.java</code>去查找，对于<code>c:\javaclass</code>也一样，JAVA会去查找<code>c:\javaclass\tk\an15m\util\Print.java</code></li>
</ul>
<h2 id="import-static-静态导入"><a href="#import-static-静态导入" class="headerlink" title="import static 静态导入"></a>import static 静态导入</h2><ul>
<li><code>import static</code>是JDK1.5中的新特性。</li>
<li>一般的导入格式为<code>import tk.an15m.util.Print</code>，这样导入的是<code>Print</code>这个类</li>
<li>静态导入的格式为<code>import static tk.an15m.util.Print.print</code>,这样导入的是<code>Print</code>类下的static方法<code>print()</code>，这样做的好处是在使用<code>print()</code>方法的时候可以直接写<code>print()</code>而不用加类名<code>Print.print()</code></li>
</ul>
<h2 id="类的访问权限"><a href="#类的访问权限" class="headerlink" title="类的访问权限"></a>类的访问权限</h2><ol>
<li>每个编译单元(文件)都只能有一个<code>public</code>类，并且文件名前缀必须与<code>public</code>类同名，包含大小写</li>
<li>若一个编译单元内不包含<code>public</code>类，则可以随意命名</li>
<li>类既不可以是<code>private</code>的(这样会使其他所有类都无法访问它)，也不可以是<code>protected</code>的(除非是内部类)。因此，类要么是具有包访问权限，要么是<code>public</code>的</li>
<li><p>如果不想任何人创建一个类的对象，可以将构造器都指定为<code>private</code>，但有一个例外，可以该类的static成员内部创建该类的对象。例子：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Soup</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Soup</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="comment">//creat via static method</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Soup <span class="title">makeSoup</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Soup();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//creat a static object and return a reference upon request.</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Soup sp = <span class="keyword">new</span> Soup();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Soup <span class="title">access</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> ps;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>如果一个类只具有包访问权限，但是该的的某个static成员是<code>public</code>的话，该成员仍然可以被外部访问 </p>
</li>
</ol>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;第六章 访问权限控制&lt;br&gt;
    
    </summary>
    
      <category term="JAVA编程思想v4" scheme="http://an15m.tk/categories/JAVA%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3v4/"/>
    
    
      <category term="java" scheme="http://an15m.tk/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>linux添加用户</title>
    <link href="http://an15m.tk/2017/09/26/linux%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7/"/>
    <id>http://an15m.tk/2017/09/26/linux添加用户/</id>
    <published>2017-09-26T04:51:11.000Z</published>
    <updated>2017-09-26T04:57:07.237Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>linux添加新用户<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="新建组-非必须"><a href="#新建组-非必须" class="headerlink" title="新建组(非必须)"></a>新建组(非必须)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">groupadd --gid 2000 groupname     <span class="comment">#2000为组ID  要大于500</span></div></pre></td></tr></table></figure>
<h2 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">useradd username -g groupname -m -s /bin/bash</div></pre></td></tr></table></figure>
<h2 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd username</div></pre></td></tr></table></figure>
<h2 id="获取root权限"><a href="#获取root权限" class="headerlink" title="获取root权限"></a>获取root权限</h2><p>修改<code>/etc/sudoers</code>文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#找到下面两行，然后新增最后一行</span></div><div class="line"><span class="comment">## Allow root to run any commands anywhere</span></div><div class="line">root ALL=(ALL:ALL) ALL</div><div class="line">username ALL=(ALL:ALL) ALL</div></pre></td></tr></table></figure>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;linux添加新用户&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://an15m.tk/categories/linux/"/>
    
    
      <category term="linux" scheme="http://an15m.tk/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux server使用U盘</title>
    <link href="http://an15m.tk/2017/09/26/linux-server%E4%BD%BF%E7%94%A8U%E7%9B%98/"/>
    <id>http://an15m.tk/2017/09/26/linux-server使用U盘/</id>
    <published>2017-09-26T04:45:40.000Z</published>
    <updated>2017-11-18T02:45:50.483Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>linux server中挂载、卸载U盘<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p>在插入U盘前先进到<code>/dev</code>目录下面<code>ls</code>一下<br>插入U盘以后再<code>ls</code>一下，查看目录下面多了什么，一般是<code>sdb sdb4 sdc sdc4...</code><br>使用<code>sudo mount /dev/sdb4  /mnt/</code>进行挂载，之后进入<code>/mnt</code>目录就是U盘的目录</p>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p><code>sudo umount /dev/sdb4</code>然后拔掉U盘即可</p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;linux server中挂载、卸载U盘&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://an15m.tk/categories/linux/"/>
    
    
      <category term="linux" scheme="http://an15m.tk/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu设置静态IP</title>
    <link href="http://an15m.tk/2017/09/26/Ubuntu%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP/"/>
    <id>http://an15m.tk/2017/09/26/Ubuntu设置静态IP/</id>
    <published>2017-09-26T04:27:56.000Z</published>
    <updated>2017-09-26T04:41:52.336Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>Ubuntu设置静态IP并配置永久DNS<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="设置静态IP"><a href="#设置静态IP" class="headerlink" title="设置静态IP"></a>设置静态IP</h2><p>使用<code>ifconig</code>命令查看网卡，例如<code>eth0</code><br>打开<code>/etc/network/interfaces</code>修改内容如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">auto lo</div><div class="line">iface lo inet loopback  </div><div class="line"> </div><div class="line">auto eth0 <span class="comment">#对应ifconfig的结果</span></div><div class="line">iface eth0 inet static</div><div class="line">address 192.168.1.*** </div><div class="line">netmask 255.255.255.0</div><div class="line">gateway 192.168.1.1   <span class="comment">#根据自己实际情况</span></div></pre></td></tr></table></figure>
<h2 id="设置永久dns"><a href="#设置永久dns" class="headerlink" title="设置永久dns"></a>设置永久dns</h2><p>在<code>/etc/resolv.conf</code>中添加两行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nameserver 114.114.114.114</div><div class="line">nameserver 8.8.8.8</div></pre></td></tr></table></figure>
<p>在<code>/etc/resolvconf/resolv.conf.d/bash</code>中也添加两行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nameserver 114.114.114.114</div><div class="line">nameserver 8.8.8.8</div></pre></td></tr></table></figure>
<h2 id="重启网络"><a href="#重启网络" class="headerlink" title="重启网络"></a>重启网络</h2><p>以下命令可选：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/networking restart</div><div class="line">sudo service networking restart</div><div class="line">sudo ifdown eth0; sudo ifup eth0</div></pre></td></tr></table></figure>
<p>如果上面的命令都失败的话，就只能重启系统了</p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;Ubuntu设置静态IP并配置永久DNS&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://an15m.tk/categories/linux/"/>
    
    
      <category term="ubuntu" scheme="http://an15m.tk/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="http://an15m.tk/2017/09/10/markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://an15m.tk/2017/09/10/markdown语法/</id>
    <published>2017-09-10T02:06:42.000Z</published>
    <updated>2017-09-10T02:50:13.875Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>markdown语法<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="兼容html"><a href="#兼容html" class="headerlink" title="兼容html"></a>兼容html</h2><p>markdown只包含html标签的一部分，对于没有被包含的html标签，可以直接在md中使用。但是html区块元素比如<code>&lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt;</code>等标签，必须在前后加上空行与其他内容隔开，还要求他们的开始标签与结尾标签不能用制表符或空格来缩进。例如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">这是一个普通段落。</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Foo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line">这是另一个普通段落。</div></pre></td></tr></table></figure>
<p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。</p>
<p>HTML 的区段（行内）标签如 <code>&lt;span&gt;、&lt;cite&gt;、&lt;del&gt;</code> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p>
<p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p>
<hr>
<h2 id="特殊字符自动转换"><a href="#特殊字符自动转换" class="headerlink" title="特殊字符自动转换"></a>特殊字符自动转换</h2><p><code>&lt;和&amp;</code>字符markdown会根据需要选择是否转换成<code>&amp;lt;和&amp;amp;</code><br>至于#，只要不在行首就行，当然在代码区块中出现在行首也是没问题的</p>
<hr>
<h2 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h2><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p>
<h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>markdown的段内换行是自动的（手动在特定位置按回车对markdown来说是没用的）<br>但是你可以先按两个空格再回车，即可实现在任意位置换行（即产生<code>&lt;br /&gt;</code>标签）</p>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section">#标题1</span></div><div class="line"></div><div class="line">等同于:</div><div class="line"></div><div class="line">标题1</div><div class="line">===</div></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section">##标题2</span></div><div class="line"></div><div class="line">等同于:</div><div class="line"></div><div class="line">标题2</div><div class="line">---</div></pre></td></tr></table></figure>
<h3 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h3><p>用”&gt;”实现<br>可以嵌套,通过不同数量的”&gt;”<br>引用内可以使用其他markdown语法</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>无序列表以<code>-</code>或<code>+</code>或<code>*</code> + <code>空格</code><br>有序列表以<code>数字</code> + <code>.</code> + <code>空格</code><br>有序列表跟数字的顺序并没有什么关系…<br>如果两个列表项目间用空行分开，则在输出html的时候markdown会将项目内容用<code>&lt;p&gt;</code>标签包起来<br>列表项目内包含多个段落时，段落间用一个由4个空格或1个制表符的空行隔开<br>如果列表项目里需要用到引用，则&gt;必须缩进：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">*   </span>A list item with a blockquote:</div><div class="line"></div><div class="line"><span class="code">    &gt; This is a blockquote</span></div><div class="line"><span class="code">    &gt; inside a list item.</span></div></pre></td></tr></table></figure>
<p>如果放代码块的话，代码块就需要缩进两次</p>
<h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>用缩进4个空格或是1个制表符来实现<br>另外GitHub Flavored Markdown请参看<a href="https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown" target="_blank" rel="external">GFM</a></p>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>一行中用三个 <code>*</code> 或 <code>-</code> 或 <code>_</code></p>
<hr>
<h2 id="区段元素"><a href="#区段元素" class="headerlink" title="区段元素"></a>区段元素</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>行内式：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">This is [<span class="string">an example</span>](<span class="link">http://example.com/ "Title"</span>) inline link.</div><div class="line"></div><div class="line">[<span class="string">This link</span>](<span class="link">http://example.net/</span>) has no title attribute.</div></pre></td></tr></table></figure>
<p>Title可写可不写<br>如果是同主机资源，可以使用相对路径</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">See my [<span class="string">About</span>](<span class="link">/about/ "Title"</span>) page for details.</div><div class="line"></div><div class="line">See my [<span class="string">About</span>](<span class="link">/about/</span>) page for details.</div></pre></td></tr></table></figure>
<p>参考式：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">This is [<span class="string">an example</span>][<span class="symbol">id</span>] reference-style link.</div></pre></td></tr></table></figure>
<p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">id</span>]: <span class="link">http://example.com/  "Optional Title Here"</span></div><div class="line">或</div><div class="line">[<span class="symbol">id</span>]: <span class="link">http://example.com/  (Optional Title Here)</span></div><div class="line">或</div><div class="line">[<span class="symbol">id</span>]: <span class="link">http://example.com/</span></div></pre></td></tr></table></figure>
<p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">id</span>]: <span class="link">http://example.com/</span></div><div class="line"><span class="code">    "Optional Title Here"</span></div></pre></td></tr></table></figure>
<p>链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写<br>隐式链接标记功能让你可以省略指定链接标记，如：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">Google</span>][<span class="symbol"></span>]</div></pre></td></tr></table></figure>
<p>然后定义链接内容：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">Google</span>]: <span class="link">http://google.com/</span></div></pre></td></tr></table></figure>
<h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>Markdown 使用星号<code>*</code>和底线<code>_</code>作为标记强调字词的符号，被<code>*</code>或<code>_</code>包围的字词会被转成用 <code>&lt;em&gt;</code>标签包围，用两个<code>*</code>或 <code>_</code>包起来的话，则会被转成 <code>&lt;strong&gt;</code>，例如：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="emphasis">*single asterisks*</span></div><div class="line"></div><div class="line"><span class="emphasis">_single underscores_</span></div><div class="line"></div><div class="line"><span class="strong">**double asterisks**</span></div><div class="line"></div><div class="line"><span class="strong">__double underscores__</span></div></pre></td></tr></table></figure>
<p>但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。<br>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\<span class="emphasis">*this text is surrounded by literal asterisks\*</span></div></pre></td></tr></table></figure>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>如果要标记一小段行内代码，你可以用<em>反引号</em>把它包起来，例如：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Use the <span class="code">`printf()`</span> function.</div></pre></td></tr></table></figure>
<p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">``There is a literal backtick (`) here.``</div></pre></td></tr></table></figure>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>行内式：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">![<span class="string">Alt text</span>](<span class="link">/path/to/img.jpg</span>)</div><div class="line"></div><div class="line">![<span class="string">Alt text</span>](<span class="link">/path/to/img.jpg "Optional title"</span>)</div></pre></td></tr></table></figure>
<p>参考式：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">Alt text</span>][<span class="symbol">id</span>]</div></pre></td></tr></table></figure>
<p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">id</span>]: <span class="link">url/to/image  "Optional title attribute"</span></div></pre></td></tr></table></figure>
<p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>
<hr>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>网址自动链接：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">http:</span>//<span class="attr">example.com</span>/&gt;</span></span></div></pre></td></tr></table></figure>
<p>markdown会转换为：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com/"</span>&gt;</span></span>http://example.com/<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>邮箱自动链接：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">address@example.com</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>makrdown会自动生成一个邮箱链接</p>
<h3 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h3><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <code>&lt;em&gt;</code> 标签），你可以在星号的前面加上反斜杠：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\<span class="emphasis">*literal asterisks\*</span></div></pre></td></tr></table></figure>
<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">\  反斜线</div><div class="line">`  反引号</div><div class="line">-  星号</div><div class="line">_  底线</div><div class="line">&#123;&#125; 花括号</div><div class="line">[] 方括号</div><div class="line">() 括弧</div><div class="line">#  井字号</div><div class="line">*  加号</div><div class="line">+  减号</div><div class="line">.  英文句点</div><div class="line">!  惊叹号</div></pre></td></tr></table></figure>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;markdown语法&lt;br&gt;
    
    </summary>
    
      <category term="markdown" scheme="http://an15m.tk/categories/markdown/"/>
    
    
      <category term="markdown" scheme="http://an15m.tk/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>列出和删除iptables</title>
    <link href="http://an15m.tk/2017/09/10/%E5%88%97%E5%87%BA%E5%92%8C%E5%88%A0%E9%99%A4iptables/"/>
    <id>http://an15m.tk/2017/09/10/列出和删除iptables/</id>
    <published>2017-09-10T01:59:31.000Z</published>
    <updated>2017-09-10T02:02:40.079Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>列出和删除iptables<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="按规范列出iptables-按创建时的语句列出"><a href="#按规范列出iptables-按创建时的语句列出" class="headerlink" title="按规范列出iptables(按创建时的语句列出)"></a>按规范列出iptables(按创建时的语句列出)</h2><p>列出所有激活的iptables rules<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo iptables -S</div></pre></td></tr></table></figure></p>
<h2 id="列出特定的Chain"><a href="#列出特定的Chain" class="headerlink" title="列出特定的Chain"></a>列出特定的Chain</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo iptables -S TCP</div><div class="line">$ sudo iptables -S INPUT</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="以tables的形式列出"><a href="#以tables的形式列出" class="headerlink" title="以tables的形式列出"></a>以tables的形式列出</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo iptables -L</div></pre></td></tr></table></figure>
<h2 id="按规范删除iptables"><a href="#按规范删除iptables" class="headerlink" title="按规范删除iptables"></a>按规范删除iptables</h2><p>在添加该iptables的命令中iptables后面表示添加的参数(例如<code>-I -A</code>)换成<code>-D</code>就行了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo iptables -A INPUT -m conntrack --ctstate INVALID -j DROP <span class="comment">#添加</span></div><div class="line">$ sudo iptables -D INPUT -m conntrack --ctstate INVALID -j DROP <span class="comment">#对应的删除</span></div></pre></td></tr></table></figure></p>
<h2 id="按chain和number来删除规则"><a href="#按chain和number来删除规则" class="headerlink" title="按chain和number来删除规则"></a>按chain和number来删除规则</h2><p>首先通过下面命令来列出规则：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo iptables -L --line-number</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 示例输出</div><div class="line">Chain INPUT (policy DROP)</div><div class="line">num  target     prot opt source               destination</div><div class="line">1    ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED</div><div class="line">2    ACCEPT     all  --  anywhere             anywhere</div><div class="line">3    DROP       all  --  anywhere             anywhere             ctstate INVALID</div><div class="line">...</div></pre></td></tr></table></figure>
<p>然后我们就可以通过chain name和num来删除一条规则：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 删除第三列target为DROP的那个规则</span></div><div class="line">$ sudo iptables -D INPUT 3  <span class="comment"># INPUT 为第一行 Chain后面的名字，num为下面要删除的那个规则那一行首的num</span></div></pre></td></tr></table></figure></p>
<h2 id="NOTES"><a href="#NOTES" class="headerlink" title="NOTES"></a>NOTES</h2><p>我在第一次尝试的时候首先通过以下命令添加了规则：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo iptables -t nat -I PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8443</div><div class="line">sudo iptables -t nat -I OUTPUT -p tcp -o lo --dport 443 -j REDIRECT --to-ports 8443</div></pre></td></tr></table></figure></p>
<p>然后就用列出规则的命令查看，结果怎么都出不来。<br>原因如下：<br>通过<code>-t nat</code>添加的规则，是添加到了一个叫nat的table中。而不用-t参数的时候，系统有个默认的叫做filter的table，所有不加-t参数的命令都是在操作filter这个table。<br>那么到底怎么才能操作nat这个table呢？很简单，只要在上面所有命令中iptables的后面也加上一个<code>-t nat</code>就可以了。比如要列出规则：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo iptables -t nat -L</div></pre></td></tr></table></figure></p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;列出和删除iptables&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://an15m.tk/categories/linux/"/>
    
    
      <category term="iptables" scheme="http://an15m.tk/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>linux本地端口映射</title>
    <link href="http://an15m.tk/2017/09/10/linux%E6%9C%AC%E5%9C%B0%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/"/>
    <id>http://an15m.tk/2017/09/10/linux本地端口映射/</id>
    <published>2017-09-10T01:54:40.000Z</published>
    <updated>2017-09-10T02:00:53.485Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>将linux服务器的一个端口映射到本地的另一个端口<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">


<h2 id="使用iptables建立规则"><a href="#使用iptables建立规则" class="headerlink" title="使用iptables建立规则"></a>使用iptables建立规则</h2><p>例：将3722端口映射到22端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo iptables -t nat -I PREROUTING -p tcp --dport 3722 -j REDIRECT --to-ports 22</div><div class="line">$ sudo iptables -t nat -I OUTPUT -p tcp -o lo --dport 3722 -j REDIRECT --to-ports 22</div></pre></td></tr></table></figure></p>
<h2 id="永久生效"><a href="#永久生效" class="headerlink" title="永久生效"></a>永久生效</h2><ol>
<li><p>安装iptables-persistent</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install iptables-persistent</div></pre></td></tr></table></figure>
</li>
<li><p>然后，可以通过下面的命令来保存或重新加载iptables rules</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/iptables-persistent save</div><div class="line">sudo /etc/init.d/iptables-persistent reload</div></pre></td></tr></table></figure>
</li>
<li><p>对Ubuntu 16.04 Server上面的两个命令好像不好使，用下面两个命令代替：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo netfilter-persistent save</div><div class="line">sudo netfilter-persistent reload</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;将linux服务器的一个端口映射到本地的另一个端口&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://an15m.tk/categories/linux/"/>
    
    
      <category term="iptables" scheme="http://an15m.tk/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>JAVA编程思想第四版第五章</title>
    <link href="http://an15m.tk/2017/09/07/thinking-in-java-v4-5/"/>
    <id>http://an15m.tk/2017/09/07/thinking-in-java-v4-5/</id>
    <published>2017-09-07T09:13:12.000Z</published>
    <updated>2017-09-07T11:07:24.233Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>第五章 初始化与清理<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="用构造器确保初始化"><a href="#用构造器确保初始化" class="headerlink" title="用构造器确保初始化"></a>用构造器确保初始化</h2><ul>
<li>构造器必须与类同名，并且没有返回值，这与返回值为空(void)不同。</li>
<li>在java中，“创建”和“初始化”是捆绑在一起的，两者不能分离。</li>
</ul>
<h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><ul>
<li>参数顺序的不同，也可以区别两个方法。</li>
</ul>
<h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><ul>
<li><code>this</code>关键字的含义：调用这个方法的对象的引用。</li>
<li>在一个类中，调用类中的某个方法，需要在前面加<code>this</code>关键字，但是在方法内部调用同一个类中的另一个方法，不需要写<code>this</code>。也就是说只有在类主体中调用类中的方法，才需要用到<code>this</code>关键字。</li>
</ul>
<h2 id="清理：最终处理和垃圾回收"><a href="#清理：最终处理和垃圾回收" class="headerlink" title="清理：最终处理和垃圾回收"></a>清理：最终处理和垃圾回收</h2><ul>
<li>java的垃圾回收器只能释放由<code>new</code>分配的内存。</li>
<li>对象可能不被回收：如果java虚拟机(JVM)并未面临内存耗尽的情形，它是不会浪费实践去执行垃圾回收以回复内存的。</li>
<li>java允许在类中定义个<code>finalize()</code>方法，当垃圾回收器将要释放无用对象的内存时，先调用该对象的<code>finalize()</code>方法。如果在程序终止之前垃圾回收器始终没有执行垃圾回收操作，那么垃圾回收器将始终不会调用无用对象的<code>finalize()</code>方法。但是，很重要，垃圾回收什么时候发生，会不会发生，没有人可以预知，就算是使用了<code>System.gc()</code>或<code>Runtime.gc()</code>方法，垃圾回收也不一定会发生。所以，慎用！</li>
</ul>
<h2 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="初始化顺序"></a>初始化顺序</h2><ol>
<li>在类的内部，变量定义的先后顺序决定了初始化的顺序。即使变量定义散步于方法定义之间，他们仍旧会在任何方法(包括构造器)被调用之前就得到初始化。</li>
<li>静态初始化只有在必要时刻才初始化。</li>
<li>初始化的顺序是先静态对象(如果它们尚未初始化)，然后是“非静态”对象。</li>
<li>构造器可以看成是静态方法。</li>
<li><p>显式的静态初始化：通过“静态块”，例如：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> i;</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> j;</div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    i = <span class="number">1</span>;</div><div class="line">    j = <span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样的，显式的静态初始化代码，也只有在必须的时候才会执行。</p>
</li>
</ol>
<h2 id="非静态实例初始化"><a href="#非静态实例初始化" class="headerlink" title="非静态实例初始化"></a>非静态实例初始化</h2><p>java中也有被称为实例初始化的类似语法，用来初始化每一个对象的非静态变量。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> j;</div><div class="line">    &#123;</div><div class="line">        i = <span class="number">1</span>;</div><div class="line">        j = <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h2><ol>
<li><code>int[] a = {1,2,3}</code>，这种数组初始化方式等价于使用<code>new</code>。</li>
<li><p>数组之间赋值，例如：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] a1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</div><div class="line"><span class="keyword">int</span>[] a2 = a1;</div></pre></td></tr></table></figure>
<p>真正复制的其实是一个引用，也就是说，当改变<code>a2</code>时，<code>a1</code>也会跟着变。</p>
</li>
<li>基本类型的数组在创建后会被自动初始化为默认值。</li>
<li>非基本类型的数组必须手动初始化。</li>
<li><p>可变参数列表，例如：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a, String... b)</span></span>&#123;</div><div class="line">    <span class="comment">//codes...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上例中，可以传入0 ~ N个字符串。另外，可变参数必须方法参数列表的最后。</p>
</li>
</ol>
<h2 id="枚举类型enum"><a href="#枚举类型enum" class="headerlink" title="枚举类型enum"></a>枚举类型enum</h2><ol>
<li><p>枚举类型的实例是常量，因此按照命名习惯它们都用大写字母表示(如果一个名字中有多个单词，用下划线将它们隔开)。例如：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Directions&#123;</div><div class="line">    EAST , WEST , SOUTH , NORTH , NORTH_EAST , SOUTH_WEST</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>为了使用<code>enum</code>，需要创建一个该类型的引用，并将其赋值给某个实例：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Directions east = Directions.EAST;</div><div class="line">System.out.println(east);</div></pre></td></tr></table></figure>
</li>
<li><p>在你创建<code>enum</code>时，编译器会自动添加一些有用的特性。例如，自动创建<code>toString()</code>方法来转换成字符串，<code>ordinal()</code>方法来表示某个特定<code>enum</code>常量的声明顺序、<code>static values()</code>方法用来按照<code>enum</code>常量的声明顺序，产生由这些常量值构成的数组：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(Directions d : Directions.values())&#123;</div><div class="line">  System.out.println(d + <span class="string">", ordinal "</span> + d.ordinal());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>enum</code>是一个类，并且拥有自己的方法。</p>
</li>
<li><p><code>enum</code>与<code>switch</code>的完美配合：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Directions direction;</div><div class="line"><span class="keyword">switch</span>(direction)&#123;</div><div class="line">    <span class="keyword">case</span> EAST: System.out.println(<span class="string">"The direction of east."</span>);<span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> WEST: System.out.println(<span class="string">"The direction of west."</span>);<span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> NORTH: System.out.println(<span class="string">"The direction of north."</span>);<span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> SOUTH: System.out.println(<span class="string">"The direction of south."</span>);<span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> NORTH_EAST: System.out.println(<span class="string">"The direction of north-east."</span>);<span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> SOUTH_WEST: System.out.println(<span class="string">"The direction of south-west."</span>);<span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>: System.out.println(<span class="string">"Other directions."</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实<code>default</code>不是必须的，因为你知道有多少种可能性，不可能有未知的可能性。</p>
</li>
</ol>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;第五章 初始化与清理&lt;br&gt;
    
    </summary>
    
      <category term="JAVA编程思想v4" scheme="http://an15m.tk/categories/JAVA%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3v4/"/>
    
    
      <category term="java" scheme="http://an15m.tk/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA编程思想第四版第四章</title>
    <link href="http://an15m.tk/2017/09/07/thinking-in-java-v4-4/"/>
    <id>http://an15m.tk/2017/09/07/thinking-in-java-v4-4/</id>
    <published>2017-09-07T09:12:56.000Z</published>
    <updated>2017-09-07T11:04:03.695Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>第四章  执行控制流程<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="Foreach语法"><a href="#Foreach语法" class="headerlink" title="Foreach语法"></a>Foreach语法</h2><p><code>Foreach</code>可以用于任何<code>Iterable</code>对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span>[] f = <span class="keyword">new</span> <span class="keyword">float</span>[]&#123;<span class="number">1.1f</span>,<span class="number">2.1f</span>,<span class="number">3.2f</span>&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">float</span> x : f) &#123;</div><div class="line">    System.out.println(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="臭名昭著的goto"><a href="#臭名昭著的goto" class="headerlink" title="臭名昭著的goto"></a>臭名昭著的goto</h2><ol>
<li>java不支持<code>goto</code>语句，但仍可以进行类似的跳转，但比起典型的<code>goto</code>有了很多限制。另外，<code>goto</code>仍然是java中的一个保留字。</li>
<li><p>标签的使用：标签是后面跟有冒号的标识符，就像<code>label1:</code>这样。java中标签要写在迭代语句之前，中间最好不要有任何其他语句。假如有以下代码：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">label1:</div><div class="line">outer-iteration&#123;</div><div class="line">    inter-iteration&#123;</div><div class="line">        <span class="comment">//...</span></div><div class="line">        <span class="keyword">break</span>; <span class="comment">//(1)</span></div><div class="line">        <span class="comment">//...</span></div><div class="line">        <span class="keyword">continue</span>; <span class="comment">//(2)</span></div><div class="line">        <span class="comment">//...</span></div><div class="line">        <span class="keyword">continue</span> label1; <span class="comment">//(3)</span></div><div class="line">        <span class="comment">//...</span></div><div class="line">        <span class="keyword">break</span> label1; <span class="comment">//(4)</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 在(1)中，<code>break</code>中断内部迭代，回到外部迭代。<br> 在(2)中，<code>continue</code>是执行点移回内部迭代的起始处。<br> 在(3)中，<code>continue label1</code>同时中断内部迭代以及外部迭代，直接转到<code>label1</code>处；随后，它实际上是继续迭代过程，但却从外部迭代开始。<br> 在(4)中，<code>break label1</code>也会中断所有迭代，并回到<code>label1</code>处，但并不重新进入迭代，它实际上是完全终止了两个迭代。</p>
</li>
</ol>
<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>switch中的选择因子必须是<code>int</code>或<code>char</code>那样的整数值(java7以后也可以使用字符串)。</p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;第四章  执行控制流程&lt;br&gt;
    
    </summary>
    
      <category term="JAVA编程思想v4" scheme="http://an15m.tk/categories/JAVA%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3v4/"/>
    
    
      <category term="java" scheme="http://an15m.tk/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA编程思想第四版第三章</title>
    <link href="http://an15m.tk/2017/09/07/thinking-in-java-v4-3/"/>
    <id>http://an15m.tk/2017/09/07/thinking-in-java-v4-3/</id>
    <published>2017-09-07T09:12:50.000Z</published>
    <updated>2017-09-07T11:01:03.081Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>第三章 操作符<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><ul>
<li>基本类型的赋值：基本类型存储了实际的值，而非指向一个对象的引用，所以在其赋值的时候，是直接将一个地方的内容复制到另一个地方。</li>
<li>对象的“赋值”：对一个对象进行操作时，我们真正操作的是对象的引用。所以倘若“将一个对象赋值给另一个对象”，实际是将“引用”从一个地方复制到了另一个地方。这意味着假若对对象使用<code>c=d</code>，那么c和d都指向原本只有d指向的那个对象。也就是说，当“c指向的对象发送变化时”，“d指向的对象”也会跟着发生变化，而原来c所指向的那个对象，现在没有任何标识符指向它，所以它“丢失了”，“垃圾回收器”会自动将它清理，而c实际上成了d的一个“别名”，这种现象称为“别名现象”。而在基本类型的赋值中，c的变化是不影响d的。</li>
<li>由于“别名现象”的存在：，假如我们将一个对象以参数的形式传递给一个方法，在方法内部修改对象会影响到方法外部的对象。</li>
</ul>
<h2 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h2><ul>
<li>整数除法会直接去掉小数位，而不是四舍五入。</li>
</ul>
<h2 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h2><ul>
<li><code>==</code>与<code>!=</code>：当这两个关系操作符作用与对象时，比较的是两个对象的“引用”是否相同，也就是这两个对象是不是同一个对象。而要比较两个对象的实际内容是不是相同的话，可以使用所有对象都适用的<code>equals()</code>方法。但是若比较的两个对象中有我们自己创建的类，那么我们需要在我们写的类中覆盖<code>equals()</code>方法，因为我们写的类中的默认<code>equals()</code>方法比较的还是引用。</li>
</ul>
<h2 id="直接常量"><a href="#直接常量" class="headerlink" title="直接常量"></a>直接常量</h2><ol>
<li><p>直接常量一般要在其后面加上后缀字符以标志它的类型：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">后缀：</div><div class="line">    L或l：long</div><div class="line">    F或f：float</div><div class="line">    D或d：double</div><div class="line">前缀：</div><div class="line">    0x或0X：十六进制，十六进制数使用于所有整数数据类型(可以赋值给所有整数类型)</div><div class="line">    0：八进制</div></pre></td></tr></table></figure>
<p> 在使用十六进制和八进制的时候，可以使用<code>Integer</code>和<code>Long</code>类的静态方法<code>toBinaryString()</code>将结果以二进制形式显示出来。</p>
</li>
</ol>
<h2 id="按位操作符"><a href="#按位操作符" class="headerlink" title="按位操作符"></a>按位操作符</h2><ul>
<li><code>&amp;</code>：与；<code>|</code>：或；<code>~</code>：非；<code>^</code>：异或</li>
<li>布尔值可以执行按位“与”、“或”和“异或”操作，不能执行按位“非”操作。</li>
<li>移位表达式中，不能使用布尔运算。</li>
</ul>
<h2 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h2><ul>
<li><code>&lt;&lt;</code>：左移操作符。能按照操作符右侧指定的位数将操作符左侧的操作数向左移动(在低位补0)。</li>
<li><code>&gt;&gt;</code>：“有符号”右移操作符。按照操作符右侧指定的位数将操作符左侧的操作数向右移动。“有符号”右移操作符使用“符号扩展”：若符号为正，则在高位插入0；若符号为负，则在高位插入1.</li>
<li><code>&gt;&gt;&gt;</code>：“无符号”右移操作符。它使用“零扩展”：无论正负，都在高位插入0。</li>
</ul>
<h2 id="字符串操作符-或"><a href="#字符串操作符-或" class="headerlink" title="字符串操作符 + 或 +="></a>字符串操作符 + 或 +=</h2><ul>
<li>java中不支持操作符的重载</li>
</ul>
<h2 id="类型转换操作符"><a href="#类型转换操作符" class="headerlink" title="类型转换操作符"></a>类型转换操作符</h2><ul>
<li>java允许我们把任何基本数据类型转换成别的基本数据类型，但布尔型除外，布尔型不允许进行任何类型转换。</li>
<li>“类”数据类型，不允许进行类型转换。为了将类转换成另一种，必须采用特殊的方法。</li>
<li>将<code>float</code>或<code>double</code>转型为整数类型时，总是对该数字执行截尾。如果要得到舍入的结果，就要使用<code>java.lang.Math</code>中的<code>round()</code>方法。</li>
<li>对比<code>int</code>小的类型(<code>byte</code>、<code>char</code>或<code>short</code>)执行算术运算或者按位运行，那么在运算之前，这些值会自动转换成<code>int</code>。这样，最终的结果也是<code>int</code>类型。</li>
<li>java对两个<code>int</code>运算结果溢出不会报错也没有警告信息。</li>
</ul>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;第三章 操作符&lt;br&gt;
    
    </summary>
    
      <category term="JAVA编程思想v4" scheme="http://an15m.tk/categories/JAVA%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3v4/"/>
    
    
      <category term="java" scheme="http://an15m.tk/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA编程思想第四版第二章</title>
    <link href="http://an15m.tk/2017/09/07/thinking-in-java-v4-2/"/>
    <id>http://an15m.tk/2017/09/07/thinking-in-java-v4-2/</id>
    <published>2017-09-07T09:12:47.000Z</published>
    <updated>2017-09-07T10:23:39.927Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>第二章 一切都是对象<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<ol>
<li>数据存储的地方：按快慢：寄存器&gt;堆栈&gt;堆&gt;常量存储&gt;非RAM存储<ol>
<li>常量存储：存放在程序代码内部</li>
<li>非RAM存储：存放在程序之外，比如 <em>流对象</em> 和 <em>持久化对象</em></li>
</ol>
</li>
<li>基本类型和非基本类型的区别<br> <input type="hidden" value="Just for something ! You can ignore it."><ol>
<li>非基本类型使用<code>new</code>关键字来初始化，存储于堆中，操作非基本类型使用的实际上是对象的一个“引用”，而非对象本身。</li>
<li>基本类型的创建不用<code>new</code>关键字，而是创建一个非引用的“自动”变量，直接存储“值”，存储于堆栈中，比存储于堆中更加高效。另外，java基本类型所占存储空间的大小不随机器硬件架构的变化而变化。</li>
<li>java中存在基本类型的包装类型，比如int的包装类型为Integer类型，可以使用<code>new Integer(1);</code>或<code>Integer integer = 3;</code>在堆中创建一个非基本类型，来表示对应的基本类型。</li>
</ol>
</li>
<li><p>java中不允许在C和C++里将一个较大作用域的变量“隐藏”起来的做法，以下代码是错误的：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> x = <span class="number">12</span>;</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> x = <span class="number">9</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>java对象不具备和基本类型一样的生命周期。当用<code>new</code>创建一个java对象时，它可以存活于作用域之外。例如以下代码：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    String s = <span class="keyword">new</span> String(<span class="string">"a string"</span>);</div><div class="line">&#125;<span class="comment">//作用域终点</span></div></pre></td></tr></table></figure>
<p> 引用s在作用域终点就消失了，然而，s指向的String对象仍继续占据内存空间。</p>
</li>
<li>当变量作为 <em>类的成员</em> 时，java会自动用默认值对其进行初始化；但当变量作为 <em>局部变量</em> (并非某个类的字段)时，java不会对其进行自动初始化。</li>
<li><p><code>static</code>关键字<br>java中的 <em>成员</em> 与 <em>方法</em> 都是与类绑定的，只有通过<code>new</code>创建那个类的对象，该类的 <em>成员</em> 和 <em>方法</em> 才可以被外界调用。<br>有两种情形是用上述方法无法满足的。一是情况是想给某特定域分配单一存储空间，而不去考虑究竟要创建多少对象，甚至根本就不创建任何对象。另一种情况是希望某个方法不与包换它的类的任何对象关联在一起，也就是说，即使没有创建对象，也可以调用这个方法。<br><code>static</code>可以满足这两方面的需求。当声明一个事物是<code>static</code>时，就意味着这个域或者方法不会与包含它的那个类的任何对象事例关联在一起。所以，即使从未创建某个类的任何对象，也可以调用其<code>static</code>方法或访问其<code>static</code>域。假设有以下代码：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span></span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">47</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 现在，即使你创建了两个<code>StaticTest</code>对象，<code>StaticTest.i</code>也只有一份存储空间，这两个对象共享同一个<code>i</code>。如果继续写：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">StaticTest st1 = <span class="keyword">new</span> StaticTest();</div><div class="line">StaticTest st2 = <span class="keyword">new</span> StaticTest();</div></pre></td></tr></table></figure>
<p> 在这里，<code>st1.i</code>和<code>st2.i</code>指向同一存储空间，因此他们具有相同的值47。<br>引用<code>static</code>变量有两种方法。一是通过一个对象去定位它，如<code>st1.i</code>；也可以通过类名直接引用，如<code>StaticTest.i</code>,而这对于非静态成员则不行。</p>
</li>
<li><p>注释文档<br>如果代码与文档是分离的，那么在每次修改代码时，都需要修改相应的文档。javadoc允许你将代码与文档写在一个文件内，然后由javadoc去提取注释。javadoc的输出是一个HTML文档。此外，如果想对javadoc处理过的信息执行特殊的操作，那么可以通过编写你自己的被称为“doclets”的javadoc处理器来实现。下面介绍javadoc的语法：</p>
<ul>
<li>所有javadoc命令都只能在<code>/**</code>注释中出现，结束和通常一样使用<code>*/</code>。</li>
<li>使用javadoc的方式主要有两种：嵌入HTML或使用“文档标签”。 <em>独立文档标签</em> 是一些以“@”字符开头的命令，要置于注释行的最前面。 <em>行内文档标签</em> (在花括号内)可以出现在javadoc注释中的任何地方，也是以“@”开头。</li>
<li><p>共有三种类型的注释文档，分别对应与注释位置后面的三种元素：类、域和方法。例：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 类注释 */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Documentation</span></span>&#123;</div><div class="line">  <span class="comment">/** 域注释 */</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> i;</div><div class="line">  <span class="comment">/** 方法注释 */</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>javadoc只能为<code>public</code>和<code>protected</code>成员进行文档注释。<code>private</code>和包内可访问成员的注释会被忽略掉(可以用<code>-private</code>参数将<code>private</code>成员的注释也包括在内)</p>
</li>
<li><p>嵌入式HTML：javadoc支持利用HTML对文档进行格式化，例如：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* &lt;pre&gt;</span></div><div class="line"><span class="comment">* System.out..println(new Date());</span></div><div class="line"><span class="comment">* &lt;/pre&gt;</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>
<p>  不要在嵌入式HTML中使用标题标签，例如<code>&lt;h1&gt;</code>或<code>&lt;hr&gt;</code>，因为javadoc会插入自己的标题，而你的标题可能同它们发生冲突。</p>
</li>
<li>注意，在文档注释中，位于每一行开头的<code>*</code>和前导空格都会被javadoc丢弃。</li>
<li><p>一些标签示例：</p>
<ul>
<li><p><code>@see</code> ：引用其他类。<code>@see</code>标签允许用户引用其他类的文档。javadoc会在其生成的文件中，通过<code>@see</code>标签链接到其他文档。格式如下：</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@see</span> classname</div><div class="line"><span class="meta">@see</span> fully-qualified-classname    <span class="comment">//无歧义类名</span></div><div class="line">@see fully-qualified-classname#method-name</div></pre></td></tr></table></figure>
<p>  上述每种格式都会在生成的文档中加入一个具有超链接的“See Also”(参见)条目。但是javadoc不会检查你所提供的超链接是否有效。</p>
</li>
<li><code>{@link package.class#member label}</code>：该标签与<code>@see</code>标签极其相似，只是它用与行内，并且是用“label”作为超链接文本而不用“See Also”。</li>
<li><code>{@docRoot}</code>：该标签产生到文档根目录的相对路径，用于文档树页面的显式超链接。</li>
<li><code>{@inheritDoc}</code>：该标签从当前这个类的最直接的基类中继承相关文档到当前的文档注释中。</li>
<li><p><code>@version</code>：格式如下：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@version</span> version-information</div></pre></td></tr></table></figure>
<p>  其中，“version-information”可以是任何你认为适合包含在版本说明中的重要信息。javadoc通过<code>-version</code>参数来获取版本信息。</p>
</li>
<li><p><code>@author</code>：格式如下：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@author</span> author-information</div></pre></td></tr></table></figure>
<p>  其中，“author-information”可以包含作者姓名、电子邮件或其他适宜的信息。javadoc通过<code>-author</code>获取作者信息。使用多个标签列出所有作者是，他们必须连续放置。</p>
</li>
<li><code>@since</code>：最早使用该方法、类或接口的版本</li>
<li><p><code>@param</code>：格式如下：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@param</span> parammeter-name description</div></pre></td></tr></table></figure>
<p>  “parammeter-name”为参数名，“description”为说明，可以给每个参数写一个。</p>
</li>
<li><p><code>@return</code>：格式如下：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@return</span> description</div></pre></td></tr></table></figure>
<p>  “description”用来描述返回值的信息。</p>
</li>
<li><p><code>@throws</code>：格式如下：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@throws</span> fully-qualified-<span class="class"><span class="keyword">class</span>-<span class="title">name</span> <span class="title">description</span></span></div></pre></td></tr></table></figure>
<p>  “fully-qualified-class-name”为一个异常类的无歧义名字。对所有可能抛出的异常类都要进行说明。</p>
</li>
<li><code>@deprecated</code>：该标签用于指出一些旧特性已由改进的新特性取代。Java SE5中，该标签已被<code>@Deprecated</code>标签取代。</li>
</ul>
</li>
</ul>
</li>
<li>编码风格：<ul>
<li>类名首字母要大写</li>
<li>如果类名由几个单词构成，那么把它们并在一起(不要用下划线来分隔名字)，其中每个内部单词的首字母都采用大写形式。这种风格有时称作“驼峰风格”。几乎其他所有内容——方法、字段(成员变量)以及对象引用名称等，都用这种格式，不一样的只是标识符的第一个字母采用小写。</li>
</ul>
</li>
</ol>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;第二章 一切都是对象&lt;br&gt;
    
    </summary>
    
      <category term="JAVA编程思想v4" scheme="http://an15m.tk/categories/JAVA%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3v4/"/>
    
    
      <category term="java" scheme="http://an15m.tk/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA编程思想第四版第一章</title>
    <link href="http://an15m.tk/2017/09/07/thinking-in-java-v4-1/"/>
    <id>http://an15m.tk/2017/09/07/thinking-in-java-v4-1/</id>
    <published>2017-09-07T09:06:07.000Z</published>
    <updated>2017-09-07T10:23:22.979Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>第一章 对象导论<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<ol>
<li><code>private</code>关键字：除类型创建者和类型的内部方法之外的任何人都不能访问。<br><code>protected</code>关键字：与<code>private</code>相当，差别在与继承的类可以访问<code>protected</code>成员。</li>
</ol>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;第一章 对象导论&lt;br&gt;
    
    </summary>
    
      <category term="java编程思想v4" scheme="http://an15m.tk/categories/java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3v4/"/>
    
    
      <category term="java" scheme="http://an15m.tk/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>fsat git</title>
    <link href="http://an15m.tk/2017/08/30/fsat-git/"/>
    <id>http://an15m.tk/2017/08/30/fsat-git/</id>
    <published>2017-08-30T06:36:33.000Z</published>
    <updated>2017-09-05T06:48:06.640Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>git clone慢的解决方法<br><a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<ul>
<li>首先你要有一个代理，推荐<a href="https://github.com/shadowsocks" target="_blank" rel="external">shadowsocks</a></li>
</ul>
<h2 id="为http和https协议设置socks5代理"><a href="#为http和https协议设置socks5代理" class="headerlink" title="为http和https协议设置socks5代理"></a>为http和https协议设置socks5代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global http.proxy <span class="string">'socks5://&lt;your_proxy_host&gt;:&lt;your_proxy_port&gt;'</span></div><div class="line">git config --global https.proxy <span class="string">'socks5://&lt;your_proxy_host&gt;:&lt;your_proxy_port&gt;'</span></div></pre></td></tr></table></figure>
<h2 id="为git协议设置socks5代理"><a href="#为git协议设置socks5代理" class="headerlink" title="为git协议设置socks5代理"></a>为git协议设置socks5代理</h2><p>以下格式使用的是<code>git</code>协议<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git://github.com/git/git.git</div></pre></td></tr></table></figure></p>
<p>首先创建一个文件<code>git-proxy</code>，写入以下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">nc -x &lt;your_proxy_host&gt;:&lt;your_proxy_port&gt; <span class="variable">$1</span> <span class="variable">$2</span></div></pre></td></tr></table></figure></p>
<p>这里的<code>nc</code>是<code>netcat openbsd</code>而不是<code>netcat traditional</code>。<br>给文件添加可执行权限<code>sudo chmod +x git-proxy</code>。</p>
<p>将<code>git-proxy</code>文件所在文件夹加入环境变量<code>$PATH</code>（记得刷新环境变量）。</p>
<p>配置<code>core.gitProxy</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global --add core.gitProxy git-proxy</div></pre></td></tr></table></figure></p>
<h2 id="为ssh协议设置socck5代理"><a href="#为ssh协议设置socck5代理" class="headerlink" title="为ssh协议设置socck5代理"></a>为ssh协议设置socck5代理</h2><p>以下格式使用的是<code>ssh</code>协议：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git@github.com:git/git.git</div></pre></td></tr></table></figure></p>
<p>在配置之前首先运行以下命令确保你能<code>ssh</code>到你想连接的网站。例如<code>github</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -vT git@github.com</div></pre></td></tr></table></figure></p>
<p>出现以下回应说明成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi your_username! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure></p>
<p>以下方法不一定每个人都能用，取决于你的代理服务商有没有提供相关功能：<br>修改 <code>~/.ssh/config</code> 加入如下内容：<br>全局代理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ProxyCommand nc -X 5 -x &lt;your_proxy_host&gt;:&lt;your_proxy_port&gt; %h %p</div></pre></td></tr></table></figure></p>
<p>特定域名进行代理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Host 域名</div><div class="line">ProxyCommand nc -X 5 -x &lt;your_proxy_host&gt;:&lt;your_proxy_port&gt; %h %p</div><div class="line"></div><div class="line">Host github.com</div><div class="line">ProxyCommand nc -X 5 -x &lt;your_proxy_host&gt;:&lt;your_proxy_port&gt; %h %p</div></pre></td></tr></table></figure></p>
<p>如果<code>git clone git@github:git/git.git</code>长时间无反应，最后报以下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ssh_exchange_identification: Connection closed by remote host</div><div class="line">fatal: Could not read from remote repository.</div><div class="line"></div><div class="line">Please make sure you have the correct access rights</div><div class="line">and the repository exists.</div></pre></td></tr></table></figure></p>
<p>说明代理服务商不支持相关功能。</p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;git clone慢的解决方法&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://an15m.tk/categories/git/"/>
    
    
      <category term="git" scheme="http://an15m.tk/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git config命令</title>
    <link href="http://an15m.tk/2017/08/30/git-config/"/>
    <id>http://an15m.tk/2017/08/30/git-config/</id>
    <published>2017-08-30T02:33:57.000Z</published>
    <updated>2017-09-05T06:58:52.727Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>git config命令相关知识<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="配置目录"><a href="#配置目录" class="headerlink" title="配置目录"></a>配置目录</h2><h3 id="git配置目录分三级"><a href="#git配置目录分三级" class="headerlink" title="git配置目录分三级"></a>git配置目录分三级</h3><ul>
<li>仓库级，通过<code>--local</code>配置，在当前仓库下<code>.git/config</code></li>
<li>全局级，通过<code>--global</code>配置，在用户目录下<code>~/.gitconfig</code></li>
<li>系统级，通过<code>--system</code>配置，在<code>/etc/gitconfig</code>中</li>
<li>配置文件的权重是<code>仓库&gt;全局&gt;系统</code></li>
</ul>
<h2 id="一些配置详解"><a href="#一些配置详解" class="headerlink" title="一些配置详解"></a>一些配置详解</h2><ul>
<li><code>core.gitProxy</code>：当使用Git协议抓取时（作为命令主机端口？）执行的“代理命令”，而不是直接建立连接。如果变量值使用“COMMAND FOR DOMAIN”的格式，则该命令仅适用于以指定的域字符串结尾的主机名。该变量可以多次设置，并按照给定的顺序进行匹配; 以第一次匹配到的为准。<br>这个配置可以被<code>GIT_PROXY_COMMAND</code>环境变量覆盖（它始终普遍应用）。<br>特殊字符串<code>none</code>可以用作代理命令来指定给定域模式不使用任何代理。 这有助于在为外部域使用通用代理的同时从代理使用中排除防火墙内的服务器。</li>
<li><code>http.sslVerify</code>：是否在获取或推送HTTPS时验证SSL证书。 可以被<code>GIT_SSL_NO_VERIY</code>环境变量覆盖。</li>
<li><code>http.sslCert</code>：获取或推送HTTPS时包含SSL证书的文件。 可以被<code>GIT_SSL_CERT</code>环境变量覆盖。</li>
<li><code>http.sslKey</code>：获取或推送HTTPS时包含SSL私钥的文件。 可以被<code>GIT_SSL_KEY</code>环境变量覆盖。</li>
</ul>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://an15m.tk">我的博客</a></p>
</blockquote>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;git config命令相关知识&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://an15m.tk/categories/git/"/>
    
    
      <category term="git" scheme="http://an15m.tk/tags/git/"/>
    
  </entry>
  
</feed>
