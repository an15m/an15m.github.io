<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-25T08:34:08.574Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World!</title>
    <link href="http://yoursite.com/2017/08/25/Hello-World-0/"/>
    <id>http://yoursite.com/2017/08/25/Hello-World-0/</id>
    <published>2017-08-25T07:19:58.000Z</published>
    <updated>2017-08-25T08:34:08.574Z</updated>
    
    <content type="html"><![CDATA[<!-- ** Hello World! ：**  –&gt;
<p><Excerpt in index | 首页摘要\></p>
<h2 id="aa"><a href="#aa" class="headerlink" title="aa"></a>aa</h2><p>nice </p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文\="">

<h2 id="bb"><a href="#bb" class="headerlink" title="bb"></a>bb</h2><p>ccc</p>
</the>]]></content>
    
    <summary type="html">
    
      &lt;!-- ** Hello World! ：**  –&amp;gt;
&lt;p&gt;&lt;Excerpt in index | 首页摘要\&gt;&lt;/p&gt;
&lt;h2 id=&quot;aa&quot;&gt;&lt;a href=&quot;#aa&quot; class=&quot;headerlink&quot; title=&quot;aa&quot;&gt;&lt;/a&gt;aa&lt;/h2&gt;&lt;p&gt;nice &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/08/25/hello-world/"/>
    <id>http://yoursite.com/2017/08/25/hello-world/</id>
    <published>2017-08-25T07:06:26.542Z</published>
    <updated>2017-08-25T07:06:26.542Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一个完整项目的得失</title>
    <link href="http://yoursite.com/2017/04/11/fullprj-desc/"/>
    <id>http://yoursite.com/2017/04/11/fullprj-desc/</id>
    <published>2017-04-11T02:18:22.000Z</published>
    <updated>2017-08-25T08:03:16.704Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 一个完整项目的得失：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>想做一个完美的cms太难，架构本身就是要有取舍，只有最合适的架构，没有最好的架构。<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>今年从2月份到4月份做了一个完整到项目，后台cms系统，包括前台应用。写打造一个完美到系统，确实需要考虑太多因素，<br>自己收获颇多，特此总结一下。</p>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>cms后台主要使用java的spring，mybits，shiro框架，前台就是jquery，jsp，bootstrap，<br>数据库方面是mysql，缓存没有使用</p>
<h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>使用mysql设计数据库，对业务的不深入很多时候会导致设置的表满足不了需求</p>
<ol>
<li>提前预留几个def空字段，这样不需要频繁的修改表结构</li>
<li>索引要建好，数据量增长起来后，没有索引搜索肯定慢的很，对常见的搜索条件建索引</li>
<li>对并发有个大致的数</li>
</ol>
<h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><ol>
<li>反向代理配置，代理80端口，代理域名访问</li>
<li>静态资源缓存，压缩</li>
<li>websocket配置，https配置</li>
<li>集群的负载均衡配置</li>
</ol>
<h2 id="tomcat配置"><a href="#tomcat配置" class="headerlink" title="tomcat配置"></a>tomcat配置</h2><ol>
<li>jvm参数设置</li>
<li>项目路径设置</li>
<li>日志，重启配置</li>
</ol>
<h2 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h2><ol>
<li>防止</li>
</ol>
<h2 id="选购服务器和域名"><a href="#选购服务器和域名" class="headerlink" title="选购服务器和域名"></a>选购服务器和域名</h2><ol>
<li>估算并发量，预留一定的并发量</li>
<li>根据并发量计算带宽和cpu还有内存</li>
<li>根据网络情况选择不同区域的服务器</li>
<li>根据需求选择域名</li>
</ol>
<h2 id="突发状况的处理机制"><a href="#突发状况的处理机制" class="headerlink" title="突发状况的处理机制"></a>突发状况的处理机制</h2><ol>
<li>选购的第三方接口挂了</li>
<li>数据库挂了</li>
<li>服务器挂了</li>
<li>网络异常</li>
</ol>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc" target="_blank" rel="external">我的博客</a></p>
</blockquote>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 一个完整项目的得失：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;想做一个完美的cms太难，架构本身就是要有取舍，只有最合适的架构，没有最好的架构。&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>git学习笔记</title>
    <link href="http://yoursite.com/2016/05/01/git-config-study/"/>
    <id>http://yoursite.com/2016/05/01/git-config-study/</id>
    <published>2016-05-01T00:24:45.000Z</published>
    <updated>2017-08-25T08:03:16.705Z</updated>
    
    <content type="html"><![CDATA[<p><strong> git学习笔记：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>    git的常用操作，高级技巧都要哦<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文\="">

<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><ol>
<li>下载安装包 ￼下载地址￼</li>
<li>安装git</li>
<li>进入命令行,输入git看看是否成功</li>
</ol>
<h2 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h2><ol>
<li>配置全局用户名和密码<br> `git config –global user.name “John Doe”<br> git config –global user.email johndoe@example.com<br> `</li>
<li>配置ssh公钥<br> <code>cd ~/.ssh</code> 然后<code>ls</code><br> 如果没有,直接生成,一路点击enter<br> ```<br> ssh-keygen<br> cat ~/.ssh/id_rsa.pub<br> ```<br> 把公钥配置到github的个人设置</li>
</ol>
<h2 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h2><ol>
<li><p>repository操作</p>
<ul>
<li>检出（clone）仓库代码：<code>git clone repository-url</code> / <code>git clone repository-url local-directoryname</code><ul>
<li>例如，clone jquery 仓库到本地： <code>git clone git://github.com/jquery/jquery.git</code></li>
<li>clone jquery 仓库到本地，并且重命名为 my-jquery ：<code>git clone git://github.com/jquery/jquery.git my-jquery</code></li>
</ul>
</li>
<li>查看远程仓库：<code>git remote -v</code></li>
<li>添加远程仓库：<code>git remote add [name] [repository-url]</code></li>
<li>删除远程仓库：<code>git remote rm [name]</code></li>
<li>修改远程仓库地址：<code>git remote set-url origin new-repository-url</code></li>
<li>拉取远程仓库： <code>git pull [remoteName] [localBranchName]</code></li>
<li>推送远程仓库： <code>git push [remoteName] [localBranchName]</code></li>
</ul>
</li>
<li><p>提交/拉取/合并/删除</p>
<ul>
<li>添加文件到暂存区（staged）：<code>git add filename</code> / <code>git stage filename</code></li>
<li>将所有修改文件添加到暂存区（staged）： <code>git add --all</code> / <code>git add -A</code></li>
<li>提交修改到暂存区（staged）：<code>git commit -m &#39;commit message&#39;</code> / <code>git commit -a -m &#39;commit message&#39;</code> 注意理解 -a 参数的意义</li>
<li>从Git仓库中删除文件：<code>git rm filename</code></li>
<li>从Git仓库中删除文件，但本地文件保留：<code>git rm --cached filename</code></li>
<li><p>重命名某个文件：<code>git mv filename newfilename</code> 或者直接修改完毕文件名 ，进行<code>git add -A &amp;&amp; git commit -m &#39;commit message&#39;</code> Git会自动识别是重命名了文件</p>
</li>
<li><p>获取远程最新代码到本地：<code>git pull (origin branchname)</code> 可以指定分支名，也可以忽略。pull 命令自动 fetch 远程代码并且 merge，如果有冲突，会显示在状态栏，需要手动处理。更推荐使用：<code>git fetch</code> 之后 <code>git merge --no-ff origin branchname</code> 拉取最新的代码到本地仓库，并手动 merge 。</p>
</li>
</ul>
</li>
<li><p>日志查看</p>
<ul>
<li>查看日志：<code>git log</code></li>
<li>查看日志，并查看每次的修改内容：<code>git log -p</code></li>
<li>查看日志，并查看每次文件的简单修改状态：<code>git log --stat</code></li>
<li>一行显示日志：<code>git log --pretty=oneline</code> / <code>git log --pretty=&#39;format:&quot;%h - %an, %ar : %s&#39;</code></li>
<li>查看日志范围：<ul>
<li>查看最近10条日志：<code>git log -10</code></li>
<li>查看2周前：<code>git log --until=2week</code> 或者指定2周的明确日期，比如：<code>git log --until=2015-08-12</code></li>
<li>查看最近2周内：<code>git log --since=2week</code> 或者指定2周明确日志，比如：<code>git log --since=2015-08-12</code></li>
<li>只查看某个用户的提交：<code>git log --committer=user.name</code> / <code>git log --author=user.name</code></li>
</ul>
</li>
</ul>
</li>
<li><p>取消操作</p>
<ul>
<li>上次提交msg错误/有未提交的文件应该同上一次一起提交，需要重新提交备注：<code>git commit --amend -m &#39;new msg&#39;</code></li>
<li>一次<code>git add -A</code>后，需要将某个文件撤回到工作区，即：某个文件不应该在本次commit中：<code>git reset HEAD filename</code></li>
<li>撤销某些文件的修改内容：<code>git checkout -- filename</code> 注意：一旦执行，所有的改动都没有了，谨慎！谨慎！谨慎！</li>
<li>将工作区内容回退到远端的某个版本：<code>git reset --hard &lt;sha1-of-commit&gt;</code><ul>
<li><code>--hard</code>：reset stage and working directory ,<commitid> 以来所有的变更全部丢弃，并将 HEAD 指向<commitid></commitid></commitid></li>
<li><code>--soft</code>：nothing changed to stage and working directory ,仅仅将HEAD指向<commitid> ，所有变更显示在”changed to be committed”中</commitid></li>
<li><code>--mixed</code>：default,reset stage ,nothing to working directory ，这也就是第二个例子的原因</li>
</ul>
</li>
</ul>
</li>
<li><p>比较差异</p>
<ul>
<li>查看工作区（working directory）和暂存区（staged）之间差异：<code>git diff</code></li>
<li>查看工作区（working directory）与当前仓库版本（repository）HEAD版本差异：<code>git diff HEAD</code></li>
<li>查看暂存区（staged）与当前仓库版本（repository）差异：<code>git diff --cached</code> / <code>git diff --staged</code></li>
</ul>
</li>
<li><p>合并操作</p>
<ul>
<li>解决冲突后/获取远程最新代码后合并代码：<code>git merge branchname</code></li>
<li>保留该存在版本合并log：<code>git merge --no-ff branchname</code> 参数<code>--no-ff</code>防止 fast-forward 的提交</li>
</ul>
</li>
</ol>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; git学习笔记：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    git的常用操作，高级技巧都要哦&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
  </entry>
  
</feed>
