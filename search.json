[{"title":"Hello World!","url":"/2017/08/25/Hello-World-0/","content":"\n<!-- ** {{title}} ：**  -->\n<Excerpt in index | 首页摘要\\>\n## aa\nnice \n\n<!-- more -->\n<The rest of contents | 余下全文\\>\n\n## bb\nccc"},{"title":"Hello World","url":"/2017/08/25/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"},{"title":"一个完整项目的得失","url":"/2017/04/11/fullprj-desc/","content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n想做一个完美的cms太难，架构本身就是要有取舍，只有最合适的架构，没有最好的架构。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 概述\n今年从2月份到4月份做了一个完整到项目，后台cms系统，包括前台应用。写打造一个完美到系统，确实需要考虑太多因素，\n自己收获颇多，特此总结一下。\n\n## 架构\ncms后台主要使用java的spring，mybits，shiro框架，前台就是jquery，jsp，bootstrap，\n数据库方面是mysql，缓存没有使用\n\n## 数据库设计\n使用mysql设计数据库，对业务的不深入很多时候会导致设置的表满足不了需求\n1. 提前预留几个def空字段，这样不需要频繁的修改表结构\n2. 索引要建好，数据量增长起来后，没有索引搜索肯定慢的很，对常见的搜索条件建索引\n3. 对并发有个大致的数\n\n## nginx配置\n1. 反向代理配置，代理80端口，代理域名访问\n2. 静态资源缓存，压缩\n3. websocket配置，https配置\n4. 集群的负载均衡配置\n\n## tomcat配置\n1. jvm参数设置\n2. 项目路径设置\n3. 日志，重启配置\n\n## 安全问题\n1. 防止\n\n## 选购服务器和域名\n1. 估算并发量，预留一定的并发量\n2. 根据并发量计算带宽和cpu还有内存\n3. 根据网络情况选择不同区域的服务器\n4. 根据需求选择域名\n\n## 突发状况的处理机制\n1. 选购的第三方接口挂了\n2. 数据库挂了\n3. 服务器挂了\n4. 网络异常\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","tags":["java"],"categories":["编程语言"]},{"title":"git学习笔记","url":"/2016/05/01/git-config-study/","content":"** git学习笔记：** <Excerpt in index | 首页摘要>\n\tgit的常用操作，高级技巧都要哦\n<!-- more -->\n<The rest of contents | 余下全文\\>\n\n## 安装git\n1. 下载安装包 ￼下载地址￼\n2. 安装git\n3. 进入命令行,输入git看看是否成功\n\n## 配置git\n1. 配置全局用户名和密码\n\t\\`git config --global user.name \"John Doe\"\n\tgit config --global user.email johndoe@example.com\n\t\\`\n2. 配置ssh公钥\n\t`cd ~/.ssh` 然后`ls`\n\t如果没有,直接生成,一路点击enter\n\t\\`\\`\\`\n\tssh-keygen\n\tcat \\~/.ssh/id\\_rsa.pub\n\t\\`\\`\\`\n\t把公钥配置到github的个人设置\n\n## 常用的命令\n1. repository操作\n\t- 检出（clone）仓库代码：`git clone repository-url` / `git clone repository-url local-directoryname`\n\t\t+ 例如，clone jquery 仓库到本地： `git clone git://github.com/jquery/jquery.git`\n\t\t+ clone jquery 仓库到本地，并且重命名为 my-jquery ：`git clone git://github.com/jquery/jquery.git my-jquery`\n\t- 查看远程仓库：`git remote -v`\n\t- 添加远程仓库：`git remote add [name] [repository-url]`\n\t- 删除远程仓库：`git remote rm [name]`\n\t- 修改远程仓库地址：`git remote set-url origin new-repository-url`\n\t- 拉取远程仓库： `git pull [remoteName] [localBranchName]`\n\t- 推送远程仓库： `git push [remoteName] [localBranchName]`\n\n2. 提交/拉取/合并/删除\n\t- 添加文件到暂存区（staged）：`git add filename` / `git stage filename`\n\t- 将所有修改文件添加到暂存区（staged）： `git add --all` / `git add -A`\n\t- 提交修改到暂存区（staged）：`git commit -m 'commit message'` / `git commit -a -m 'commit message'` 注意理解 -a 参数的意义\n\t- 从Git仓库中删除文件：`git rm filename`\n\t- 从Git仓库中删除文件，但本地文件保留：`git rm --cached filename`\n\t- 重命名某个文件：`git mv filename newfilename` 或者直接修改完毕文件名 ，进行`git add -A && git commit -m 'commit message'` Git会自动识别是重命名了文件\n\n\t- 获取远程最新代码到本地：`git pull (origin branchname)` 可以指定分支名，也可以忽略。pull 命令自动 fetch 远程代码并且 merge，如果有冲突，会显示在状态栏，需要手动处理。更推荐使用：`git fetch` 之后 `git merge --no-ff origin branchname` 拉取最新的代码到本地仓库，并手动 merge 。\n\n3. 日志查看\n\t- 查看日志：`git log`\n\t- 查看日志，并查看每次的修改内容：`git log -p`\n\t- 查看日志，并查看每次文件的简单修改状态：`git log --stat`\n\t- 一行显示日志：`git log --pretty=oneline` / `git log --pretty='format:\"%h - %an, %ar : %s'`\n\t- 查看日志范围：\n\t\t+ 查看最近10条日志：`git log -10`\n\t\t+ 查看2周前：`git log --until=2week` 或者指定2周的明确日期，比如：`git log --until=2015-08-12`\n\t\t+ 查看最近2周内：`git log --since=2week` 或者指定2周明确日志，比如：`git log --since=2015-08-12`\n\t\t+ 只查看某个用户的提交：`git log --committer=user.name` / `git log --author=user.name`\n4. 取消操作\n\t- 上次提交msg错误/有未提交的文件应该同上一次一起提交，需要重新提交备注：`git commit --amend -m 'new msg'`\n\t- 一次`git add -A`后，需要将某个文件撤回到工作区，即：某个文件不应该在本次commit中：`git reset HEAD filename`\n\t- 撤销某些文件的修改内容：`git checkout -- filename` 注意：一旦执行，所有的改动都没有了，谨慎！谨慎！谨慎！\n\t- 将工作区内容回退到远端的某个版本：`git reset --hard <sha1-of-commit>`\n\t\t+ `--hard`：reset stage and working directory ,<commitid> 以来所有的变更全部丢弃，并将 HEAD 指向<commitid>\n\t\t+ `--soft`：nothing changed to stage and working directory ,仅仅将HEAD指向<commitid> ，所有变更显示在”changed to be committed”中\n\t\t+ `--mixed`：default,reset stage ,nothing to working directory ，这也就是第二个例子的原因\n\n5. 比较差异\n\t- 查看工作区（working directory）和暂存区（staged）之间差异：`git diff`\n\t- 查看工作区（working directory）与当前仓库版本（repository）HEAD版本差异：`git diff HEAD`\n\t- 查看暂存区（staged）与当前仓库版本（repository）差异：`git diff --cached` / `git diff --staged`\n\n6. 合并操作\n\t- 解决冲突后/获取远程最新代码后合并代码：`git merge branchname`\n\t- 保留该存在版本合并log：`git merge --no-ff branchname` 参数`--no-ff`防止 fast-forward 的提交\n","tags":["others"],"categories":["学习笔记"]}]